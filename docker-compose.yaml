version: "3"
services:
  db:
    build:
      context: ./database
      dockerfile: Dockerfile
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    profiles:
      - all
      - db
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - db-data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4
    logging:
      driver: none
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_LISTEN_PORT: ${PGADMIN_PORT}
    profiles:
      - all
      - db
    depends_on:
      - db
    ports:
      - "${PGADMIN_PORT}:${PGADMIN_PORT}"

  harvester:
    build:
      context: ./harvester
      dockerfile: Dockerfile
    volumes:
      - ./harvester:/app/src
    ports:
      - "${HARVESTER_PORT}:${HARVESTER_PORT}"
    depends_on:
      - db
    profiles:
      - all
      - services
      - notdb
    env_file: 
      - ./harvester/.env
    environment:
      PROCESSOR_PROCESS_TWEETS_ENDPOINT: http://processor:${PROCESSOR_PORT}/process-tweets/
      POSTGRES_HOST: db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      AUTH_TOKEN: ${AUTH_TOKEN}
      USE_IR: false
      # IR_PORT: ${IR_PORT}
      # IR_URL: http://image-recognition

  semantic-search:
    build:
      context: ./semantic-search
      dockerfile: Dockerfile
    volumes:
      - ./semantic-search:/app/src
    ports:
      - "${SEMANTIC_SEARCH_PORT}:${SEMANTIC_SEARCH_PORT}"
    depends_on:
      - db
      - ml-reranker
    profiles:
      - all
      - services
      - notdb
    env_file: 
      - ./semantic-search/.env
    environment:
      HARVESTER_SEARCH_ENDPOINT: http://harvester:${HARVESTER_PORT}/search-relevant-tweets/
      HARVESTER_SCRAPE_ENDPOINT: http://harvester:${HARVESTER_PORT}/scrape-tweets/
      ZERO_SHOT_CLASSIFIER_ENDPOINT: http://ml-zero-shot-classifier:${ZERO_SHOT_CLASSIFIER_PORT}/
      RERANKER_ENDPOINT: http://ml-reranker:${RERANKER_PORT}/
      POSTGRES_HOST: db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      AUTH_TOKEN: ${AUTH_TOKEN}
      PROCESSOR_PORT: ${PROCESSOR_PORT}
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      LANGSMITH_PROJECT_NAME: ${LANGSMITH_PROJECT_NAME}
      RERANK_VECTOR_SEARCH_RESULTS: ${RERANK_VECTOR_SEARCH_RESULTS}
      ZERO_SHOT_CLASSIFY_TWEETS: ${ZERO_SHOT_CLASSIFY_TWEETS}
      CLASSIFIER_AGGREGATOR: ${CLASSIFIER_AGGREGATOR}
  
  processor:
    build:
      context: ./processor
      dockerfile: Dockerfile
    volumes:
      - ./processor:/app/src
    ports:
      - "${PROCESSOR_PORT}:${PROCESSOR_PORT}"
    depends_on:
      - db
      - ml-zero-shot-classifier
      - ml-summarizer
      - ml-reranker
      - article-fetcher
      - harvester
    profiles:
      - all
      - services
      - notdb
    env_file: 
      - ./processor/.env
    environment:
      HARVESTER_SEARCH_ENDPOINT: http://harvester:${HARVESTER_PORT}/search-relevant-tweets/
      HARVESTER_SCRAPE_ENDPOINT: http://harvester:${HARVESTER_PORT}/scrape-tweets/
      ZERO_SHOT_CLASSIFIER_ENDPOINT: http://ml-zero-shot-classifier:${ZERO_SHOT_CLASSIFIER_PORT}/
      SUMMARIZER_ENDPOINT: http://ml-summarizer:${SUMMARIZER_PORT}/
      ARTICLE_FETCHER_ENDPOINT: http://article-fetcher:${ARTICLE_FETCHER_PORT}/
      RERANKER_ENDPOINT: http://ml-reranker:${RERANKER_PORT}/
      POSTGRES_HOST: db
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      AUTH_TOKEN: ${AUTH_TOKEN}
      PROCESSOR_PORT: ${PROCESSOR_PORT}
      LANGSMITH_API_KEY: ${LANGSMITH_API_KEY}
      LANGSMITH_PROJECT_NAME: ${LANGSMITH_PROJECT_NAME}
      RERANK_VECTOR_SEARCH_RESULTS: ${RERANK_VECTOR_SEARCH_RESULTS}
      ZERO_SHOT_CLASSIFY_TWEETS: ${ZERO_SHOT_CLASSIFY_TWEETS}
      CLASSIFIER_AGGREGATOR: ${CLASSIFIER_AGGREGATOR}
      FETCH_AND_SUMMARIZE: ${FETCH_AND_SUMMARIZE}

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - NITRO_PORT=${NITRO_PORT}
        - NITRO_HOST=${NITRO_HOST}
    volumes:
      - ./frontend:/app/src
    ports:
      - "${NITRO_PORT}:${NITRO_PORT}"
    depends_on:
      - db
      - semantic-search
    profiles:
      - all
      - services
      - notdb
    env_file: 
      - ./frontend/.env
    environment:
      NITRO_PORT: ${NITRO_PORT}
      NITRO_HOST: ${NITRO_HOST}
      AUTH_TOKEN: ${AUTH_TOKEN}
      NUXT_POSTGRES_HOST: db
      NUXT_POSTGRES_USER: ${POSTGRES_USER}
      NUXT_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      NUXT_POSTGRES_DB: ${POSTGRES_DB}
      NUXT_POSTGRES_PORT: ${POSTGRES_PORT}
  
  scheduler:
    build:
      context: ./scheduler
      dockerfile: Dockerfile
    volumes:
      - ./scheduler:/app/src
    ports:
      - "${SCHEDULER_PORT}:${SCHEDULER_PORT}"
    depends_on:
      - db
    profiles:
      - all
      - services
      - notdb
    env_file: 
      - ./scheduler/.env
    environment:
      SCHEDULER_PORT: ${SCHEDULER_PORT}
      AUTH_TOKEN: ${AUTH_TOKEN}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: db
      HARVESTER_SEARCH_ENDPOINT: http://harvester:${HARVESTER_PORT}/search-relevant-tweets/
      HARVESTER_SCRAPE_ENDPOINT: http://harvester:${HARVESTER_PORT}/scrape-tweets/
      PROCESSOR_PROCESS_TWEETS_ENDPOINT: http://processor:${PROCESSOR_PORT}/process-tweets/
      PROCESSOR_START_PIPELINE_ENDPOINT: http://processor:${PROCESSOR_PORT}/start-pipeline/
  
  article-fetcher:
    build:
      context: ./article-fetcher
      dockerfile: Dockerfile
    volumes:
      - ./article-fetcher:/app/src
    ports:
      - "${ARTICLE_FETCHER_PORT}:${ARTICLE_FETCHER_PORT}"
    profiles:
      - all
      - services
      - notdb
    env_file: 
      - ./article-fetcher/.env
    environment:
      ARTICLE_FETCHER_PORT: ${ARTICLE_FETCHER_PORT}
      ARTICLE_FETCHER_URL: ${ARTICLE_FETCHER_URL}
      AUTH_TOKEN: ${AUTH_TOKEN}
      ML_ENVIRONMENT: ${ML_ENVIRONMENT}
  
  ml-summarizer:
    build:
      context: ./ml-summarizer
      dockerfile: ./docker/${ML_ENVIRONMENT}/Dockerfile
    volumes:
      - ./ml-summarizer:/app/src
    ports:
      - "${SUMMARIZER_PORT}:${SUMMARIZER_PORT}"
    profiles:
      - all
      - ml
      - notdb
    env_file: 
      - ./ml-summarizer/.env
    environment:
      SUMMARIZER_PORT: ${SUMMARIZER_PORT}
      SUMMARIZER_URL: ${SUMMARIZER_URL}
      AUTH_TOKEN: ${AUTH_TOKEN}
      ML_ENVIRONMENT: ${ML_ENVIRONMENT}
  
  ml-reranker:
    build:
      context: ./ml-reranker
      dockerfile: ./docker/${ML_ENVIRONMENT}/Dockerfile
    volumes:
      - ./ml-reranker:/app/src
    ports:
      - "${RERANKER_PORT}:${RERANKER_PORT}"
    profiles:
      - all
      - ml
      - notdb
    env_file: 
      - ./ml-reranker/.env
    environment:
      RERANKER_PORT: ${RERANKER_PORT}
      RERANKER_URL: ${RERANKER_URL}
      AUTH_TOKEN: ${AUTH_TOKEN}
      ML_ENVIRONMENT: ${ML_ENVIRONMENT}
  
  ml-zero-shot-classifier:
    build:
      context: ./ml-zero-shot-classifier
      dockerfile: ./docker/${ML_ENVIRONMENT}/Dockerfile
    volumes:
      - ./ml-zero-shot-classifier:/app/src
    ports:
      - "${ZERO_SHOT_CLASSIFIER_PORT}:${ZERO_SHOT_CLASSIFIER_PORT}"
    profiles:
      - all
      - ml
      - notdb
    env_file: 
      - ./ml-zero-shot-classifier/.env
    environment:
      ZERO_SHOT_CLASSIFIER_PORT: ${ZERO_SHOT_CLASSIFIER_PORT}
      ZERO_SHOT_CLASSIFIER_URL: ${ZERO_SHOT_CLASSIFIER_URL}
      AUTH_TOKEN: ${AUTH_TOKEN}
      ML_ENVIRONMENT: ${ML_ENVIRONMENT}
  
  # image-recognition:
  #   build:
  #     context: ./image-recognition-${IR_VERSION}
  #     dockerfile: ./docker/${IR_ENVIRONMENT}/Dockerfile
  #   volumes:
  #     - ./image-recognition-${IR_VERSION}:/app/src
  #   ports:
  #     - "${IR_PORT}:${IR_PORT}"
  #   profiles:
  #     - ir
  #   env_file: 
  #     - ./image-recognition-${IR_VERSION}/.env
  #   environment:
  #     IR_URL: ${IR_URL}
  #     AUTH_TOKEN: ${AUTH_TOKEN}
  #     IR_ENVIRONMENT: ${IR_ENVIRONMENT}
  #     IR_VERSION: ${IR_VERSION}

volumes:
  db-data: